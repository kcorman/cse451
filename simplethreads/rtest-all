#!/usr/bin/perl -w

# Script to run the remote-test target against a long list of hosts in parallel.
# See --help.
#
# @author Rick Cox <rick@cs.washington.edu>

use strict;
use POSIX;
use FileHandle;
use Getopt::Long;

######################################################################
# Configuration

my @rtest_hosts = qw( hal radix waimeabay futureproof coredump
		      catapault );
# blackbox06 is too broken (hacked up ld)

my $log_dir = "rtest-logs";

# how many times should "All \d tests passed" be found in the output?
my $num_test_runs = 2;

# End Configuration
######################################################################
# Options

my ($help, $hosts, $student) = (0, "", 0);

GetOptions("help" => \$help,
	   "hosts=s" => \$hosts,
	   "student" => \$student);

if ($help) {
    print_help();
    exit(0);
}

if ($hosts) {
    @rtest_hosts = split(/,/, $hosts);
}

$num_test_runs = 1 if $student;

# End Options
######################################################################
# Script Proper

my %pids;

unless (-d $log_dir) {
    mkdir($log_dir) or die "Unable to create dir $log_dir";
}

foreach my $host (@rtest_hosts) {
    print "Starting host $host...\n";
    my $pid = start_host($host);
    $pids{$pid} = $host;
}

my $finished = 0;
while ($finished < keys(%pids)) {
    my $pid = wait();
    die "no more children?" if ($pid == -1);
    die "unknown child pid $pid" unless $pids{$pid};
    print "Host $pids{$pid} finished.\n";
    $finished++;
}

print "All hosts finished.\n";

foreach my $host (@rtest_hosts) {
    print "$host..." . (' 'x(20-length($host)))
	. (check_log($host) ? "passed\n" : "failed\n");
}

sub start_host {
    ###
    # @function start the make remote-check-host for
    # a given host asynchronously and return the PID
    # of the child make process.
    ##/
    my ($host) = @_;
    my $pid;
    
    if (($pid = fork()) < 0) {
	die "fork error: $!";
    } elsif ($pid == 0) {
	run_make($host);
    } else {
	return $pid;
    }
}

sub run_make {
    my ($host) = @_;
    
    my $log = log_name($host);
    my $fd = POSIX::open($log, O_CREAT|O_WRONLY|O_TRUNC, 0644)
	or die "unable to open log $log";
    POSIX::dup2($fd, fileno(STDOUT)) or die "unable to redirect stdout";
    POSIX::dup2($fd, fileno(STDERR)) or die "unable to redirect stderr";

    $ENV{RTEST_HOST}=$host;
    exec("make", "remote-check-host");
    die "exec failed: $!";
}

sub log_name {
    my ($host) = @_;
    return "$log_dir/rtest-$host.log";
}

sub check_log {
    my ($host) = @_;
    my $fh = new FileHandle("<".log_name($host))
	or die "Unable to open log " . log_name($host);
    return (grep /All \d+ tests passed/, <$fh>) == $num_test_runs;
}

sub print_help {
    my $hosts = join(", ", @rtest_hosts);
    print <<EOB;
Usage: rtest-all [--help] [--hosts=HOST,HOST] [--student]
Run 'make remote-check-host' for each host in:
$hosts
or the list of hosts if provided.
Logs will be written to $log_dir and checked
for successfull 'make check' output.
A distribution (simplethreads-1.X.tar.gz) should already
be built. Must be run from the simplethreads top-level
directory (as it uses the make rules to do most of the work).

Each target host must already have a ~/rtest directory.

Right now, only one host on any given file-system can be tested at
once (ie only one GWS workstation, one IWS workstation).
									 
Options:
--help          Print this message and exit.
--host=HOST,... Comma separated list of hosts to test on.
--student       The simplethreads-1.X.tar.gz is a student-dist
                (no solutions), so the user-level test is expected
		to fail.
EOB
}
